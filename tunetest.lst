   1                              * = $C000
   2                               
   3                              ; --- position of the dot ------------------
   4                   
   5                              xpos = 32
   6                              ypos = 22
   7                              screen = $0400
   8                              screenpos = screen + (40 * ypos) + xpos
   9                              colorram = $D800
  10                              colorpos = colorram + (40 * ypos) + xpos
  11                   
  12                              colorramOffset = colorram - screen
  13                   
  14                              ; --- raster lines -------------------------
  15                   
  16                              ; 10 ms are 156.25 raster lines
  17                              ; 20 ms are 312.50 raster lines
  18                   
  19                              rasterStartVisible = 51
  20                              rasterEndVisible   = (rasterStartVisible + 200)
  21                   
  22                              rasterSample       = 71    ; when to sample the data line and update the frame
  23                                                         ; Note: With ypos = 22, the dot starts on raster line
  24                                                         ; 227. Raster line 71 is about 10 ms before that.
  25                   
  26                              rasterDot          = rasterStartVisible + (8 * ypos)
  27                   
  28                              rasterBarOffset    = 0   ; how many raster lines after the low-to-high transition (+ 20 ms) to start looking for high-to-low
  29                                                       ; Note: This is also when we start drawing the yellow/blue bar.
  30                              rasterBarTarget    = 8   ; how many raster lines after the low-to-high transition (+ 20 ms) we want the high-to-low transition
  31                                                       ; Note: 8 raster lines is 512 Âµs, i.e. about .5 ms
  32                              rasterBarHeight    = 2 * (rasterBarTarget - rasterBarOffset)
  33                   
  34                              rasterRisingStart  = rasterDot - 10 ; when we start to look for the rising edge
  35                              rasterRisingEnd    = rasterEndVisible - (rasterBarHeight + rasterBarOffset)
  36                   
  37                              rasterRisingToBarEndOffset = rasterBarOffset + rasterBarHeight
  38                   
  39                              ; --- other screen positions ---------------
  40                   
  41                              yFirstSequence = 8
  42                              xSequenceMarker = 2
  43                   
  44                              screenposFirstSequenceMarker = screen + (40 * yFirstSequence) + xSequenceMarker
  45                               
  46                              yData = 15
  47                   
  48                              screenposDataStart = screen + (40 * yData)
  49                              screenposDataEnd   = screenposDataStart + (3 * 40)
  50                   
  51                              ; --- control characters -------------------
  52                   
  53                              ctrlWhite      = $05
  54                              ctrlNewline    = $0D
  55                              ctrlDown       = $11
  56                              ctrlReverseOn  = $12
  57                              ctrlHome       = $13
  58                              ctrlRed        = $1C
  59                              ctrlGreen      = $1E
  60                              ctrlBlue       = $1F
  61                              ctrlOrange     = $81
  62                              ctrlBlack      = $90
  63                              ctrlReverseOff = $92
  64                              ctrlClear      = $93
  65                              ctrlBrown      = $95
  66                              ctrlLightRed   = $96
  67                              ctrlDarkGrey   = $97
  68                              ctrlMediumGrey = $98
  69                              ctrlLightGreen = $99
  70                              ctrlLightBlue  = $9A
  71                              ctrlLightGrey  = $9B
  72                              ctrlPurple     = $9C
  73                              ctrlYellow     = $9E
  74                              ctrlCyan       = $9F
  75                   
  76                              ; --- poke colors --------------------------
  77                   
  78                              pokeBlack      = $00
  79                              pokeRed        = $02
  80                              pokeGreen      = $05
  81                              pokeBlue       = $06
  82                              pokeYellow     = $07
  83                              pokeLightRed   = $0A
  84                              pokeDarkGrey   = $0C
  85                              pokeLightGreen = $0D
  86                              pokeLightBlue  = $0E
  87                   
  88                              ; --- key codes ----------------------------
  89                   
  90                              keyRunStop     = $03
  91                              keyF5          = $87
  92                              keyF7          = $88
  93                              
  94                              ; --- kernal vectors -----------------------
  95                              
  96                              outch          = $FFD2
  97                              readkey        = $FFE4
  98                              kernalIrq      = $EA31 ; standard IRQ handler
  99                              kernalIrqRet   = $EA81 ; return from IRQ
 100                   
 101                              ; --- zeropage allocations for variables ---
 102                              
 103                              zpCurrentByte       = $02
 104                              zpExpectedBit       = $07
 105                              zpMainLo            = $0B ; for use by the main program
 106                              zpMainHi            = $0C ; for use by the main program
 107                              zpSampleLo          = $14 ; running pointer for sampling IRQ
 108                              zpSampleHi          = $15 ; running pointer for sampling IRQ
 109                              zpSampleEnable      = $16
 110                              zpRisingRaster      = $19 ; raster line where we saw the low-to-high transition
 111                              zpAvailableBits     = $FB
 112                              zpSequenceIndex     = $FC
 113                              zpTempLo            = $FC ; use only during initialization
 114                              zpNextBytePointerLo = $FD
 115                              zpTempHi            = $FD ; use only during initialization
 116                              zpNextBytePointerHi = $FE
 117                              zpRemainingBitsLo   = $43
 118                              zpRemainingBitsHi   = $44
 119                   
 120                              ; --- interrupt vectors --------------------
 121                   
 122                              vecIrq              = $0314
 123                   
 124                              ; --- VIC registers ------------------------
 125                   
 126                              vicControl          = $D011
 127                              vicRaster           = $D012
 128                              vicIrqFlag          = $D019
 129                              vicIrqMask          = $D01A
 130                              vicBorder           = $D020
 131                              vicBackground       = $D021
 132                   
 133                              ; --- CIA registers ------------------------
 134                   
 135                              ciaIntCtrl1         = $DC0D ; interrupt control
 136                   
 137                              ciaDataB2           = $DD01 ; data, port B
 138                              ciaDataDirB2        = $DD03 ; data direction, port B
 139                              ciaIntCtrl2         = $DD0D ; interrupt control
 140                   
 141                              ; --- initialize the program ---
 142                              
 143 c000 a9 00        Init       LDA #0
 144 c002 8d 20 d0                STA vicBorder        ; border color: black
 145 c005 8d 21 d0                STA vicBackground    ; background color: black
 146 c008 8d 03 dd                STA ciaDataDirB2     ; all port B bits are inputs
 147                            
 148 c00b a9 93                   LDA #ctrlClear       ; clear the screen
 149 c00d 20 d2 ff                JSR outch
 150                   
 151 c010 a2 93                   LDX #<Usage          ; print the usage message
 152 c012 a0 c2                   LDY #>Usage
 153 c014 20 56 c2                JSR PrintStr
 154                   
 155 c017 a9 58                   LDA #<screenposDataStart  ; set up screen pointer for sampling
 156 c019 85 14                   STA zpSampleLo
 157 c01b a9 06                   LDA #>screenposDataStart
 158 c01d 85 15                   STA zpSampleHi
 159                   
 160 c01f a9 ff                   LDA #$FF
 161 c021 85 07                   STA zpExpectedBit    ; no expected bit, yet
 162                   
 163 c023 a9 00                   LDA #0               ; set sequence index 0
 164 c025 85 fc                   STA zpSequenceIndex
 165                              
 166 c027 a9 01                   LDA #1
 167 c029 85 16                   STA zpSampleEnable   ; enable sampling
 168                   
 169 c02b 78                      SEI                  ; set interrupt bit, make the CPU ignore interrupt requests
 170                   
 171 c02c a9 7f                   LDA #%01111111       ; switch off interrupt signals from CIA-1
 172 c02e 8d 0d dc                STA ciaIntCtrl1
 173                   
 174 c031 2d 11 d0                AND vicControl       ; clear most significant bit of VIC's raster register
 175 c034 8d 11 d0                STA vicControl
 176                   
 177 c037 8d 0d dc                STA ciaIntCtrl1      ; acknowledge pending interrupts from CIA-1
 178 c03a 8d 0d dd                STA ciaIntCtrl2      ; acknowledge pending interrupts from CIA-2
 179                   
 180 c03d a9 01                   LDA #%00000001       ; enable raster interrupt signals from VIC
 181 c03f 8d 1a d0                STA vicIrqMask
 182                   
 183 c042 4c 7e c0                JMP HaveSeq          ; start the first sequence and enable interrupts
 184                   
 185                              ; --- main loop ---
 186                   
 187 c045 20 e4 ff     MainLoop   JSR readkey
 188 c048 f0 fb                   BEQ MainLoop         ; no key? -> repeat
 189                   
 190 c04a c9 03                   CMP #keyRunStop      ; has RUN/STOP been pressed?
 191 c04c f0 0b                   BEQ ToggleSmp        ; if yes, then toggle sampling
 192                   
 193 c04e c9 87                   CMP #keyF5
 194 c050 f0 10                   BEQ PrevSeq
 195                   
 196 c052 c9 88                   CMP #keyF7
 197 c054 f0 14                   BEQ NextSeq
 198                   
 199 c056 4c 45 c0                JMP MainLoop
 200                   
 201                              ; toggle sampling
 202 c059 a9 01        ToggleSmp  LDA #1
 203 c05b 45 16                   EOR zpSampleEnable
 204 c05d 85 16                   STA zpSampleEnable
 205 c05f 4c 45 c0                JMP MainLoop
 206                   
 207                              ; switch to prev sequence
 208 c062 78           PrevSeq    SEI                  ; suspend interrupts
 209 c063 c6 fc                   DEC zpSequenceIndex
 210 c065 30 13                   BMI LastSeq
 211 c067 4c 7e c0                JMP HaveSeq
 212                   
 213                              ; switch to next sequence
 214 c06a 78           NextSeq    SEI                  ; suspend interrupts
 215 c06b e6 fc                   INC zpSequenceIndex
 216 c06d a5 fc                   LDA zpSequenceIndex
 217 c06f c9 06                   CMP #nSequences
 218 c071 d0 0b                   BNE HaveSeq
 219                   
 220 c073 a9 00        FirstSeq   LDA #0
 221 c075 85 fc                   STA zpSequenceIndex
 222 c077 4c 7e c0                JMP HaveSeq
 223                   
 224 c07a a9 05        LastSeq    LDA #(nSequences - 1)
 225 c07c 85 fc                   STA zpSequenceIndex
 226                   
 227 c07e 20 c8 c0     HaveSeq    JSR StartSeq     ; set up the current test sequence
 228                   
 229 c081 a9 00                   LDA #pokeBlack
 230 c083 8d 20 d0                STA vicBorder    ; reset border to black in case we left it at any other color
 231                   
 232 c086 a9 00                   LDA #0
 233 c088 85 19                   STA zpRisingRaster   ; reset remembered raster line
 234                   
 235                              ; set up the sample IRQ
 236 c08a a9 47                   LDA #rasterSample
 237 c08c 8d 12 d0                STA vicRaster
 238 c08f a9 45                   LDA #<Irq
 239 c091 8d 14 03                STA vecIrq
 240 c094 a9 c1                   LDA #>Irq
 241 c096 8d 15 03                STA vecIrq + 1
 242                   
 243 c099 58                      CLI              ; enable interrupts again
 244                   
 245                              ; --- mark the currently selected sequence
 246                   
 247 c09a a9 42                   LDA #<screenposFirstSequenceMarker
 248 c09c 85 0b                   STA zpMainLo
 249 c09e a9 05                   LDA #>screenposFirstSequenceMarker
 250 c0a0 85 0c                   STA zpMainHi
 251                   
 252 c0a2 a2 00                   LDX #0
 253 c0a4 e4 fc        MarkLoop   CPX zpSequenceIndex
 254 c0a6 f0 05                   BEQ MarkThis
 255 c0a8 a9 20                   LDA #$20 ; ' '
 256 c0aa 4c af c0                JMP MarkOther
 257 c0ad a9 3e        MarkThis   LDA #$3E ; '>'
 258 c0af a0 00        MarkOther  LDY #0
 259 c0b1 91 0b                   STA (zpMainLo),Y
 260                   
 261 c0b3 18                      CLC
 262 c0b4 a5 0b                   LDA zpMainLo
 263 c0b6 69 28                   ADC #40
 264 c0b8 85 0b                   STA zpMainLo
 265 c0ba a5 0c                   LDA zpMainHi
 266 c0bc 69 00                   ADC #0
 267 c0be 85 0c                   STA zpMainHi
 268                   
 269 c0c0 e8                      INX
 270 c0c1 e0 06                   CPX #nSequences
 271 c0c3 f0 80                   BEQ MainLoop
 272 c0c5 4c a4 c0                JMP MarkLoop
 273                   
 274                              ; --- start a sequence (sequence index given in zpSequenceIndex)
 275                   
 276 c0c8 a5 fc        StartSeq   LDA zpSequenceIndex      ; multiply sequence index by 4
 277 c0ca 0a                      ASL A
 278 c0cb 0a                      ASL A
 279 c0cc 18                      CLC
 280 c0cd 69 6d                   ADC #<Sequences          ; add to address of Sequences
 281 c0cf 85 fd                   STA zpNextBytePointerLo  ; use next byte pointer temporarily to store the address
 282 c0d1 a9 00                   LDA #0
 283 c0d3 69 c2                   ADC #>Sequences
 284 c0d5 85 fe                   STA zpNextBytePointerHi
 285                   
 286                              ; load and store the number of bits in the sequence
 287 c0d7 a0 00                   LDY #0
 288 c0d9 b1 fd                   LDA (zpNextBytePointerLo),Y
 289 c0db 85 43                   STA zpRemainingBitsLo
 290 c0dd a0 01                   LDY #1
 291 c0df b1 fd                   LDA (zpNextBytePointerLo),Y
 292 c0e1 85 44                   STA zpRemainingBitsHi
 293                   
 294                              ; load and store the pointer to the sequence data
 295                   
 296 c0e3 a0 02                   LDY #2
 297 c0e5 b1 fd                   LDA (zpNextBytePointerLo),Y
 298 c0e7 48                      PHA
 299 c0e8 a0 03                   LDY #3
 300 c0ea b1 fd                   LDA (zpNextBytePointerLo),Y
 301 c0ec 85 fe                   STA zpNextBytePointerHi
 302 c0ee 68                      PLA
 303 c0ef 85 fd                   STA zpNextBytePointerLo
 304                   
 305                              ; clear zpAvailableBits
 306 c0f1 a9 00                   LDA #0
 307 c0f3 85 fb                   STA zpAvailableBits
 308                   
 309 c0f5 60                      RTS
 310                   
 311                              ; --- get the next bit in the sequence (return it in A)
 312                   
 313                              ; check whether we have available bits in zpCurrentByte
 314 c0f6 a5 fb        NextBit    LDA zpAvailableBits
 315 c0f8 d0 3d                   BNE HaveBit 
 316                   
 317                              ; --- no; we must load a byte from the sequence data
 318                   
 319                              ; check whether we have remaining bits in the sequence
 320                              ; (and therefore at least one byte remaining in the
 321                              ; sequence data)
 322 c0fa a5 44                   LDA zpRemainingBitsHi
 323 c0fc d0 07                   BNE HaveByte
 324 c0fe a5 43                   LDA zpRemainingBitsLo
 325 c100 d0 03                   BNE HaveByte
 326                   
 327                              ; --- no; we must restart the sequence
 328                   
 329 c102 20 c8 c0                JSR StartSeq
 330                   
 331                              ; --- there is at least one bit in the sequence remaining,
 332                              ;     so there is at least one more byte to load from the
 333                              ;     sequence data
 334                   
 335                              ; --- load the next byte from the sequence data,
 336                              ;     store it in zpCurrentByte, and update pointers
 337                              ;     and counters
 338                   
 339 c105 a0 00        HaveByte   LDY #0
 340 c107 b1 fd                   LDA (zpNextBytePointerLo),Y
 341 c109 85 02                   STA zpCurrentByte
 342                   
 343                              ; increase the next-byte-pointer
 344 c10b e6 fd                   INC zpNextBytePointerLo
 345 c10d d0 02                   BNE PtrDone
 346 c10f e6 fe                   INC zpNextBytePointerHi
 347                   
 348 c111 a5 44        PtrDone    LDA zpRemainingBitsHi   ; check if at least 8 bits are remaining
 349 c113 d0 11                   BNE Have8
 350 c115 a5 43                   LDA zpRemainingBitsLo
 351 c117 c9 08                   CMP #8
 352 c119 10 0b                   BPL Have8
 353                   
 354                              ; we have less than 8 bits left (their number is in A)
 355 c11b 85 fb                   STA zpAvailableBits
 356 c11d a9 00                   LDA #0
 357 c11f 85 43                   STA zpRemainingBitsLo ; clear number of remaining bits
 358 c121 85 44                   STA zpRemainingBitsHi
 359 c123 4c 37 c1                JMP HaveBit 
 360                   
 361                              ; --- we have at least 8 bits remaining
 362                   
 363 c126 a9 08        Have8      LDA #8
 364 c128 85 fb                   STA zpAvailableBits
 365                              ; decrement the remaining bits counter by 8
 366 c12a a5 43                   LDA zpRemainingBitsLo
 367 c12c 38                      SEC
 368 c12d e9 08                   SBC #8
 369 c12f 85 43                   STA zpRemainingBitsLo
 370 c131 a5 44                   LDA zpRemainingBitsHi
 371 c133 e9 00                   SBC #0
 372 c135 85 44                   STA zpRemainingBitsHi
 373                   
 374                              ; --- we have at least one bit available in zpCurrentByte
 375                   
 376 c137 a5 02        HaveBit    LDA zpCurrentByte ; shift the LSB out of zpCurrentByte
 377 c139 4a                      LSR
 378 c13a 85 02                   STA zpCurrentByte
 379 c13c a9 00                   LDA #0            ; and store it (the LSB) on the stack
 380 c13e 69 00                   ADC #0
 381 c140 48                      PHA
 382                   
 383                              ; decrement zpAvailableBits
 384 c141 c6 fb                   DEC zpAvailableBits
 385                   
 386 c143 68                      PLA               ; restore the LSB from the stack
 387 c144 60                      RTS
 388                   
 389                              ; --- raster interrupt, once per frame for sampling and updating the dot ----
 390                              
 391 c145 a5 16        Irq        LDA zpSampleEnable   ; is sampling enabled?
 392 c147 f0 61                   BEQ Update           ; if not, directly go to updating the dot
 393                   
 394 c149 ad 01 dd                LDA ciaDataB2        ; sample the data line
 395 c14c 0a                      ASL A
 396 c14d a9 30                   LDA #$30             ; '0'
 397 c14f 69 00                   ADC #0               ; set A to '0' or '1', depending on what we sampled
 398 c151 a0 00                   LDY #0
 399 c153 91 14                   STA (zpSampleLo),Y
 400                   
 401                              ; compare with expected bit
 402 c155 38                      SEC
 403 c156 e9 30                   SBC #$30             ; convert back to numerical 0 or 1
 404 c158 c5 07                   CMP zpExpectedBit
 405 c15a f0 0b                   BEQ Same
 406 c15c a9 ff                   LDA #$FF
 407 c15e c5 07                   CMP zpExpectedBit
 408 c160 f0 0a                   BEQ NoExpected
 409 c162 a9 02                   LDA #pokeRed
 410 c164 4c 6e c1                JMP DoneComp
 411 c167 a9 0d        Same       LDA #pokeLightGreen
 412 c169 4c 6e c1                JMP DoneComp
 413 c16c a9 0c        NoExpected LDA #pokeDarkGrey
 414                   
 415                              ; write color to color ram
 416 c16e 48           DoneComp   PHA
 417 c16f 18                      CLC
 418 c170 a5 14                   LDA zpSampleLo
 419 c172 69 00                   ADC #<colorramOffset
 420 c174 85 14                   STA zpSampleLo
 421 c176 a5 15                   LDA zpSampleHi
 422 c178 69 d4                   ADC #>colorramOffset
 423 c17a 85 15                   STA zpSampleHi
 424 c17c 68                      PLA
 425 c17d 91 14                   STA (zpSampleLo),Y
 426 c17f 38                      SEC
 427 c180 a5 14                   LDA zpSampleLo
 428 c182 e9 00                   SBC #<colorramOffset
 429 c184 85 14                   STA zpSampleLo
 430 c186 a5 15                   LDA zpSampleHi
 431 c188 e9 d4                   SBC #>colorramOffset
 432 c18a 85 15                   STA zpSampleHi
 433                   
 434                              ; increase output position for sampled data
 435 c18c e6 14                   INC zpSampleLo
 436 c18e d0 02                   BNE IncDone
 437 c190 e6 15                   INC zpSampleHi
 438                   
 439                              ; check whether we need to wrap the output position around
 440 c192 a5 14        IncDone    LDA zpSampleLo
 441 c194 c9 d0                   CMP #<screenposDataEnd
 442 c196 d0 0e                   BNE NotEnd
 443 c198 a5 15                   LDA zpSampleHi
 444 c19a c9 06                   CMP #>screenposDataEnd
 445 c19c d0 08                   BNE NotEnd
 446                   
 447                              ; reset to the beginning of the output area
 448 c19e a9 58                   LDA #<screenposDataStart
 449 c1a0 85 14                   STA zpSampleLo
 450 c1a2 a9 06                   LDA #>screenposDataStart
 451 c1a4 85 15                   STA zpSampleHi
 452                   
 453                              ; write a space after the most recent bit
 454 c1a6 a9 20        NotEnd     LDA #$20             ; ' '
 455 c1a8 91 14                   STA (zpSampleLo),Y
 456                   
 457                              ; update the dot
 458 c1aa 20 f6 c0     Update     JSR NextBit
 459 c1ad 85 07                   STA zpExpectedBit
 460 c1af c9 00                   CMP #0
 461 c1b1 f0 08                   BEQ ClearIt
 462 c1b3 a9 51        SetIt      LDA #81
 463 c1b5 8d 90 07                STA screenpos
 464 c1b8 4c c0 c1                JMP Done
 465 c1bb a9 20        ClearIt    LDA #32
 466 c1bd 8d 90 07                STA screenpos
 467 c1c0 a9 01        Done       LDA #1
 468 c1c2 8d 90 db                STA colorpos
 469                   
 470                              ; check whether we are in the tuning sequence
 471 c1c5 a5 fc                   LDA zpSequenceIndex
 472 c1c7 d0 2a                   BNE AckIrq
 473                   
 474                              ; we are in the tuning sequence
 475                              ; check whether we are expecting a high-to-low
 476                              ; transition
 477 c1c9 a5 07                   LDA zpExpectedBit
 478 c1cb d0 17                   BNE LoToHi
 479                   
 480                              ; we are in the tuning sequence and we expect
 481                              ; a high-to-low transition.
 482                              ; check whether we are remembering the
 483                              ; raster line of the previous low-to-high transition
 484 c1cd a5 19                   LDA zpRisingRaster
 485 c1cf f0 22                   BEQ AckIrq ; no memory; skip tuning
 486                   
 487                              ; set up the tuning-specific raster IRQ handler
 488                   
 489 c1d1 18                      CLC
 490 c1d2 69 00                   ADC #rasterBarOffset
 491 c1d4 8d 12 d0                STA vicRaster
 492 c1d7 a9 f9                   LDA #<TuneIrq 
 493 c1d9 8d 14 03                STA vecIrq
 494 c1dc a9 c1                   LDA #>TuneIrq
 495 c1de 8d 15 03                STA vecIrq + 1
 496 c1e1 4c f3 c1                JMP AckIrq
 497                   
 498                              ; we are in the tuning sequence and we expect
 499                              ; a low-to-high transition
 500                              ; set up the tuning-specific raster IRQ handler
 501 c1e4 a9 d9        LoToHi     LDA #rasterRisingStart
 502 c1e6 8d 12 d0                STA vicRaster
 503 c1e9 a9 30                   LDA #<RisingIrq 
 504 c1eb 8d 14 03                STA vecIrq
 505 c1ee a9 c2                   LDA #>RisingIrq
 506 c1f0 8d 15 03                STA vecIrq + 1
 507                   
 508 c1f3 0e 19 d0     AckIrq     ASL vicIrqFlag       ; acknowledge the interrupt by clearing the VIC's interrupt flag
 509 c1f6 4c 31 ea                JMP kernalIrq        ; jump into KERNAL's standard interrupt service routine to handle keyboard scan, cursor display etc.
 510                   
 511                              ; --- raster interrupt for tuning; captures the high-to-low transition ---
 512                   
 513 c1f9 ad 12 d0     TuneIrq    LDA vicRaster
 514 c1fc 38                      SEC
 515 c1fd e9 10                   SBC #rasterRisingToBarEndOffset
 516 c1ff c5 19                   CMP zpRisingRaster
 517 c201 10 13                   BPL BarEnd
 518                   
 519                              ; color the border depending on the state of the data line
 520 c203 ad 01 dd                LDA ciaDataB2
 521 c206 0a                      ASL A
 522 c207 b0 05                   BCS DataHi
 523 c209 a9 06                   LDA #pokeBlue
 524 c20b 4c 10 c2                JMP DataDone
 525 c20e a9 07        DataHi     LDA #pokeYellow
 526 c210 8d 20 d0     DataDone   STA vicBorder
 527 c213 4c f9 c1                JMP TuneIrq
 528                   
 529                              ; end of tuning bar; switch back to black border
 530                              ; and back to the sampling IRQ
 531 c216 a9 00        BarEnd     LDA #pokeBlack
 532 c218 8d 20 d0                STA vicBorder
 533                              
 534                   SetSample  ; set up the sample IRQ
 535 c21b a9 47                   LDA #rasterSample
 536 c21d 8d 12 d0                STA vicRaster
 537 c220 a9 45                   LDA #<Irq
 538 c222 8d 14 03                STA vecIrq
 539 c225 a9 c1                   LDA #>Irq
 540 c227 8d 15 03                STA vecIrq + 1
 541                   
 542 c22a 0e 19 d0     AckIrqRet  ASL vicIrqFlag       ; acknowledge the interrupt by clearing the VIC's interrupt flag
 543 c22d 4c 81 ea                JMP kernalIrqRet     ; jump into KERNAL code for returning from IRQ handler
 544                   
 545                              ; --- raster interrupt for tuning; captures the low-to-high transition ---
 546                   
 547                              ; first, we expect to see a low level
 548 c230 ad 01 dd     RisingIrq  LDA ciaDataB2
 549 c233 0a                      ASL A
 550 c234 b0 14                   BCS GiveUp      ; if not, signal problem
 551                   
 552                              ; now, let's wait for the high level (but not forever)
 553 c236 ad 12 d0     RisingLoop LDA vicRaster
 554 c239 c9 eb                   CMP #rasterRisingEnd
 555 c23b 10 0d                   BPL GiveUp      ; we've been waiting too long; give up
 556 c23d 48                      PHA             ; temporarily save the raster line number
 557 c23e ad 01 dd                LDA ciaDataB2
 558 c241 0a                      ASL A
 559 c242 68                      PLA             ; restore the raster line number we read
 560 c243 90 f1                   BCC RisingLoop  ; if not high yet, repeat the loop
 561                   
 562                              ; we just saw a low-to-high transition; remember the raster line
 563 c245 85 19                   STA zpRisingRaster     ; we know this is <= rasterRisingEnd
 564 c247 4c 16 c2                JMP BarEnd
 565                   
 566                              ; we did not see a low-to-high transition; signal a problem
 567 c24a a9 00        GiveUp     LDA #0
 568 c24c 85 19                   STA zpRisingRaster
 569 c24e a9 02                   LDA #pokeRed
 570 c250 8d 20 d0                STA vicBorder
 571 c253 4c 1b c2                JMP SetSample
 572                   
 573                              ; --- print string (pointer to string is in Y:X) -----------
 574                   
 575 c256 86 fc        PrintStr   STX zpTempLo
 576 c258 84 fd                   STY zpTempHi
 577                   
 578 c25a a0 00        PrintLoop  LDY #0
 579 c25c b1 fc                   LDA (zpTempLo),Y     ; A <- byte at zeropage[zpTempHi]:zeropage[zpTempLo]
 580 c25e f0 0c                   BEQ EndStr
 581 c260 20 d2 ff                JSR outch
 582 c263 e6 fc                   INC zpTempLo
 583 c265 d0 f3                   BNE PrintLoop
 584 c267 e6 fd                   INC zpTempHi
 585 c269 4c 5a c2                JMP PrintLoop
 586                              
 587 c26c 60           EndStr     RTS 
 588                   
 589                              ; --- sequence definitions ---------------------------------
 590                              
 591                              ; number of sequences
 592                              nSequences = 6
 593                   
 594                              ; list of sequences, 4 bytes per sequence
 595 c26d 02 00 8e c2 
 596 c271 32 00 85 c2 
 597 c275 01 00 8d c2 
 598 c279 01 00 8c c2 
 599 c27d 0e 00 8f c2 
 600 c281 0e 00 91 c2 
 601                   
 602 c285 01 00 00 00  seq1Hz     .byte $01, $00, $00, $00, $00, $00, $00
     c289 00 00 00 
 603 c28c 01           seqOn      .byte $01
 604 c28d 00           seqOff     .byte $00
 605 c28e 01           seqAlt     .byte $01
 606 c28f 25 02        seqVary0   .byte %00100101, %00000010
 607 c291 da 3d        seqVary1   .byte %11011010, %00111101
 608                   
 609                              ; --- strings ----------------------------------------------
 610                              
 611 c293 93 05        Usage      .byte ctrlClear, ctrlWhite
 612 c295 3d 3d 20 43             .text "== c64 light fantastic == tune & test =="
     c299 36 34 20 4c 
     c29d 49 47 48 54 
     c2a1 20 46 41 4e 
     c2a5 54 41 53 54 
     c2a9 49 43 20 3d 
     c2ad 3d 20 54 55 
     c2b1 4e 45 20 26 
     c2b5 20 54 45 53 
     c2b9 54 20 3d 3d 
 613 c2bd 20 20 20 20             .text "          edwin.steiner@gmx.net, 2024   "
     c2c1 20 20 20 20 
     c2c5 20 20 45 44 
     c2c9 57 49 4e 2e 
     c2cd 53 54 45 49 
     c2d1 4e 45 52 40 
     c2d5 47 4d 58 2e 
     c2d9 4e 45 54 2c 
     c2dd 20 32 30 32 
     c2e1 34 20 20 20 
 614 c2e5 0d 9b                   .byte ctrlNewline, ctrlLightGrey
 615 c2e7 2a 20 50 52             .text "* press "
     c2eb 45 53 53 20 
 616 c2ef 12 1c                   .byte ctrlReverseOn, ctrlRed
 617 c2f1 52 55 4e 2f             .text "run/stop"
     c2f5 53 54 4f 50 
 618 c2f9 92 9b                   .byte ctrlReverseOff, ctrlLightGrey
 619 c2fb 20 54 4f 20             .text " to toggle sampling."
     c2ff 54 4f 47 47 
     c303 4c 45 20 53 
     c307 41 4d 50 4c 
     c30b 49 4e 47 2e 
 620 c30f 0d                      .byte ctrlNewline
 621 c310 0d                      .byte ctrlNewline
 622 c311 2a 20 50 52             .text "* press "
     c315 45 53 53 20 
 623 c319 05                      .byte ctrlWhite
 624 c31a 46 35                   .text "f5"
 625 c31c 9b                      .byte ctrlLightGrey
 626 c31d 20 2f 20                .text " / "
 627 c320 05                      .byte ctrlWhite
 628 c321 46 37                   .text "f7"
 629 c323 9b                      .byte ctrlLightGrey
 630 c324 20 54 4f 20             .text " to cycle through  the   "
     c328 43 59 43 4c 
     c32c 45 20 54 48 
     c330 52 4f 55 47 
     c334 48 20 20 54 
     c338 48 45 20 20 
     c33c 20 
 631 c33d 20 20 54 45             .text "  test sequences."
     c341 53 54 20 53 
     c345 45 51 55 45 
     c349 4e 43 45 53 
     c34d 2e 
 632 c34e 0d                      .byte ctrlNewline
 633 c34f 0d                      .byte ctrlNewline
 634 c350 20 20                   .text "  "
 635 c352 9e                      .byte ctrlYellow
 636 c353 20                      .text " "
 637 c354 9b                      .byte ctrlLightGrey
 638 c355 20 54 55 4e             .text " tuning (alternating on/off)"
     c359 49 4e 47 20 
     c35d 28 41 4c 54 
     c361 45 52 4e 41 
     c365 54 49 4e 47 
     c369 20 4f 4e 2f 
     c36d 4f 46 46 29 
 639 c371 0d                      .byte ctrlNewline
 640 c372 20 20                   .text "  "
 641 c374 9f                      .byte ctrlCyan
 642 c375 20                      .text " "
 643 c376 9b                      .byte ctrlLightGrey
 644 c377 20 31 48 5a             .text " 1hz blinking"
     c37b 20 42 4c 49 
     c37f 4e 4b 49 4e 
     c383 47 
 645 c384 0d                      .byte ctrlNewline
 646 c385 20 20                   .text "  "
 647 c387 9f                      .byte ctrlCyan
 648 c388 20                      .text " "
 649 c389 9b                      .byte ctrlLightGrey
 650 c38a 20 41 4c 57             .text " always off"
     c38e 41 59 53 20 
     c392 4f 46 46 
 651 c395 0d                      .byte ctrlNewline
 652 c396 20 20                   .text "  "
 653 c398 9f                      .byte ctrlCyan
 654 c399 20                      .text " "
 655 c39a 9b                      .byte ctrlLightGrey
 656 c39b 20 41 4c 57             .text " always on"
     c39f 41 59 53 20 
     c3a3 4f 4e 
 657 c3a5 0d                      .byte ctrlNewline
 658 c3a6 20 20                   .text "  "
 659 c3a8 9f                      .byte ctrlCyan
 660 c3a9 20                      .text " "
 661 c3aa 9b                      .byte ctrlLightGrey
 662 c3ab 20 56 41 52             .text " varying off time"
     c3af 59 49 4e 47 
     c3b3 20 4f 46 46 
     c3b7 20 54 49 4d 
     c3bb 45 
 663 c3bc 0d                      .byte ctrlNewline
 664 c3bd 20 20                   .text "  "
 665 c3bf 9f                      .byte ctrlCyan
 666 c3c0 20                      .text " "
 667 c3c1 9b                      .byte ctrlLightGrey
 668 c3c2 20 56 41 52             .text " varying on time"
     c3c6 59 49 4e 47 
     c3ca 20 4f 4e 20 
     c3ce 54 49 4d 45 
 669 c3d2 0d                      .byte ctrlNewline
 670 c3d3 0d                      .byte ctrlNewline
 671 c3d4 0d                      .byte ctrlNewline
 672 c3d5 0d                      .byte ctrlNewline
 673 c3d6 0d                      .byte ctrlNewline
 674 c3d7 0d                      .byte ctrlNewline
 675 c3d8 57 48 45 4e             .text "when tuning, adjust r6 such"
     c3dc 20 54 55 4e 
     c3e0 49 4e 47 2c 
     c3e4 20 41 44 4a 
     c3e8 55 53 54 20 
     c3ec 52 36 20 53 
     c3f0 55 43 48 
 676 c3f3 0d                      .byte ctrlNewline
 677 c3f4 54 48 41 54             .text "that "
     c3f8 20 
 678 c3f9 12 9e                   .byte ctrlReverseOn, ctrlYellow
 679 c3fb 59 45 4c 4c             .text "yellow"
     c3ff 4f 57 
 680 c401 92 9b                   .byte ctrlReverseOff, ctrlLightGrey
 681 c403 20 41 4e 44             .text " and "
     c407 20 
 682 c408 12 1f                   .byte ctrlReverseOn, ctrlBlue
 683 c40a 42 4c 55 45 
 684 c40e 92 9b 0d                .byte ctrlReverseOff, ctrlLightGrey, ctrlNewline
 685 c411 42 4f 52 44             .text "borders have the same size."
     c415 45 52 53 20 
     c419 48 41 56 45 
     c41d 20 54 48 45 
     c421 20 53 41 4d 
     c425 45 20 53 49 
     c429 5a 45 2e 
 686 c42c 0d                      .byte ctrlNewline
 687 c42d 4f 4e 4c 59             .text "only "
     c431 20 
 688 c432 12 1f                   .byte ctrlReverseOn, ctrlBlue
 689 c434 42 4c 55 45             .text "blue  "
     c438 20 20 
 690 c43a 92 9b                   .byte ctrlReverseOff, ctrlLightGrey
 691 c43c 3a 20 49 4e             .text ": increase r6"
     c440 43 52 45 41 
     c444 53 45 20 52 
     c448 36 
 692 c449 0d                      .byte ctrlNewline
 693 c44a 4f 4e 4c 59             .text "only "
     c44e 20 
 694 c44f 12 9e                   .byte ctrlReverseOn, ctrlYellow
 695 c451 59 45 4c 4c             .text "yellow"
     c455 4f 57 
 696 c457 92 9b                   .byte ctrlReverseOff, ctrlLightGrey
 697 c459 3a 20 44 45             .text ": decrease r6"
     c45d 43 52 45 41 
     c461 53 45 20 52 
     c465 36 
 698 c466 0d                      .byte ctrlNewline
 699 c467 42 4f 52 44             .text "border "
     c46b 45 52 20 
 700 c46e 12 1c                   .byte ctrlReverseOn, ctrlRed
 701 c470 52 45 44                .text "red"
 702 c473 92 9b                   .byte ctrlReverseOff, ctrlLightGrey
 703 c475 3a 20 4e 4f             .text ": no rising edge"
     c479 20 52 49 53 
     c47d 49 4e 47 20 
     c481 45 44 47 45 
 704 c485 00                      .byte 0
 705                   
 706                   
